digraph G {
  graph [
    label="Legend - Details for Blocks 5-8 (v2)",
    labelloc="t",
    fontsize=18,
    fontname="Helvetica",
    bgcolor="white",
    rankdir=TB,
    size="8.27,11.69!",
    ratio=compress,
    margin=0.40,
    nodesep="0.20",
    ranksep="0.35"
  ];

  node [
    shape=box,
    style="rounded,filled",
    fontname="Helvetica",
    fontsize=12,
    color="#1f2937",
    fillcolor="white",
    penwidth=1.1
  ];

  L5 [label="5  Screening\n\nFile: Enhanced_stock_trading_V8.py\nFunction: apply_filter(...)\nRole: Enforce minimum Buy/Sell counts; keep passing scrips; build filtered DataFrame.", fillcolor="#ffedd5"];

  L6 [label="6  Portfolio Allocation\n\nFile: Enhanced_stock_trading_V8.py\nFunctions: calculate_stock_score(...), allocate_portfolio(...)\nScore: technical (RSI/MACD/SMA), signal quality, momentum, volatility.\nSizing: rank-based decay; clamp per-position min and max; normalize to 100 percent.\nConfig: updated_config.py (position sizing limits).", fillcolor="#dbeafe"];

  L7 [label="7  Backtesting\n\nFile: Enhanced_stock_trading_V8.py\nFunctions: apply_backtest_strategy(...), calculate_fee(...)\nEntry: open long on Buy when flat.\nExit: on Sell when min holding met and min profit met.\nFees: min(INR 20) or 2.5 percent.\nOutputs: transactions, per-scrip PnL.", fillcolor="#fde68a"];

  L8 [label="8  Aggregate Portfolio\n\nFile: Enhanced_stock_trading_V8.py\nRole: Combine per-scrip results to portfolio totals: cash, realized/unrealized PnL, metrics, allocations, holdings.", fillcolor="#f1f5f9"];

  L5 -> L6 -> L7 -> L8 [style=invis];
}
